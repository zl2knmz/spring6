1. OCP 开闭原则
    * 什么是OCP？
        OCP是软件七大开发原则中最基本的一个原则：开闭原则
        对什么开？对扩展开放。
        对什么闭？对修改关闭。
    * OCP原则是最核心的，最基本的，其他六个原则都是为这个原则服务的。
    * OCP开闭原则的核心是什么？
        只要你在扩展系统功能的时候，没有修改以前写好的代码，那么你就是符合OCP原则的。
        反之，如果在扩展系统功能的时候，你修改了之前的代码，那么这个设计是失败的，违背OCP原则。
    * 当进行系统功能扩展的时候，如果动了之前稳定的程序，修改了之前的程序，之前所有程序都需要进行重新测试。这是不想看到的，因为非常麻烦。

2. 依赖倒置原则（DIP原则）
    * 什么是依赖倒置原则？
        面向接口编程，面向抽象编程，不要面向具体编程。
    * 依赖倒置原则的目的？
        降低程序的耦合度，提高扩展力。
    * 什么叫做违背依赖倒置？
        上 依赖 下，就是违背。
        只要“下”一改动，“上”就受到牵连。

3. 当前程序的设计，显然既违背OCP，又违背DIP，怎么办？
    可以采用“控制反转”这种编程思想来解决这个问题。

4. 什么是控制反转？
    控制反转：IoC (Inversion of Control)
    反转是什么呢？
        反转的是两件事：
            第一件事：我不在程序中采用硬编码的方式来new对象了。（new对象我不管了，new对象的权利交出去了）
            第二件事：我不在程序中采用硬编码的方式来维护对象的关系了。（对象之间关系的维护权，我也不管了，交出去了。）

    控制反转：是一种编程思想。或者叫做一种新的设计模式。由于出现的比较新，没有被纳入GoF 23种设计模式范围内。

5. Spring框架
    * Spring框架实现了控制反转IoC这种思想
        Spring框架可以帮你new对象
        Spring框架可以帮你维护对象和对象之间的关系。
    * Spring是一个实现了IoC思想的容器。
    * 控制反转的实现方式有多种，其中比较重要的叫做：依赖注入（Dependency Injection 简称DI）
    * 控制反转是思想。依赖注入是这种思想的具体实现。
    * 依赖注入DI，又包括常见的两种方式：
        第一种：set注入
        第二种：构造方法注入
    * 依赖注入 中 “依赖”是什么意思？ “注入”是什么意思？
        依赖：A对象和B对象的关系。
        注入：是一种手段，通过这种手段，可以让A对象和B对象产生关系。
        依赖注入：对象A和对象B之间的关系，靠注入的手段来维护，而注入包括：set注入和构造注入。

6. 注意术语：
    OCP：开闭原则（开发原则）
    DIP：依赖倒置原则（开发原则）
    IoC：控制反转（一种思想，一种新型的设计模式）
    DI：依赖注入（控制反转思想的具体实现方式）








